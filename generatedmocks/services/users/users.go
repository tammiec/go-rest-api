// Code generated by MockGen. DO NOT EDIT.
// Source: services/users/users.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	gomock "github.com/golang/mock/gomock"
	user "github.com/tammiec/go-rest-api/models/user"
	reflect "reflect"
)

// MockUsersService is a mock of UsersService interface
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockUsersService) List() ([]*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockUsersServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsersService)(nil).List))
}

// Get mocks base method
func (m *MockUsersService) Get(request *user.UserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", request)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUsersServiceMockRecorder) Get(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersService)(nil).Get), request)
}

// Create mocks base method
func (m *MockUsersService) Create(request *user.UserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsersServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersService)(nil).Create), request)
}

// Update mocks base method
func (m *MockUsersService) Update(request *user.UserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", request)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUsersServiceMockRecorder) Update(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersService)(nil).Update), request)
}

// Delete mocks base method
func (m *MockUsersService) Delete(request *user.UserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", request)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockUsersServiceMockRecorder) Delete(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersService)(nil).Delete), request)
}
